package musgen;


import javax.sound.midi.*;
import musgen.Generator;
import musgen.Theory.Keys;
import java.util.Random;

public class PercussionGenerator {
	
	private static enum Percussions{
		TINKLE_BELL, AGOGO, STEEL_DRUMS, WOODBLOCK, TAIKO_DRUM,
		MELODIC_TOM, SYNTH_DRUM, REVERSE_CYMBAL;
	}
	
	public static int getPitch (Percussions drums) {
		switch(drums) {
			case TINKLE_BELL:
				return 113;
			case AGOGO:
				return 114;
			case STEEL_DRUMS:
				return 115;
			case WOODBLOCK:
				return 116;
			case TAIKO_DRUM:
				return 117;
			case MELODIC_TOM:
				return 118;
			case SYNTH_DRUM:
				return 119;
			case REVERSE_CYMBAL:
				return 120;
			default:
				return 119;
		}
	}
	
	public static void addRandomPercussion(Sequence sq, Percussions drums, int pitch, int timeSig, int numMeasures) {
		//makes a sequence dependent on a time signature
		// and a number of measures
		int totalBeats = timeSig/10,
			subDivisions = timeSig%10,
			totalTicks = totalBeats * subDivisions* numMeasures,
			tickPlacement =0;
		
		Track track = null;
		if(sq.getTracks().length == 0) {
			track = sq.createTrack();
		}
		else 
			track = sq.getTracks()[0];
		int randPitch = getPitch(drums);
		while(tickPlacement < totalTicks) {
			int randLength = ((int) (subDivisions / 2))*((int) (Math.random() * totalBeats)+1);
			if(totalTicks-tickPlacement < randLength) {
				randLength = totalTicks - tickPlacement;
			}
			track.add(Generator.makeMidiEvent(144, 1, randPitch, 100, tickPlacement));
			track.add(Generator.makeMidiEvent(128, 1, randPitch, 100, tickPlacement+randLength));
			tickPlacement+=randLength;
		}//while
	}//addRandomPercussion
	
	public static void play(int instrument) {
		Random random = new Random();
		int beats = random.nextInt(61) + 60;
		int timeSig = 44;
		int totalBeats = timeSig / 10;
		int subDivisions = timeSig % 10;
		int numMeasures = 8;
		Percussions drums = Percussions.STEEL_DRUMS;
		Sequence sq = null;
		try {
			sq = new Sequence(Sequence.PPQ, subDivisions);
		} catch (InvalidMidiDataException e1) {
			e1.printStackTrace();
		}
		addRandomPercussion(sq, drums, getPitch(drums), timeSig,numMeasures);
		try {
			
			MidiChannel[] midChannel;
			Synthesizer syn = MidiSystem.getSynthesizer();
			syn.open();
			
			midChannel = syn.getChannels();
			midChannel[1].programChange(instrument);
			midChannel = syn.getChannels();
					
			Sequencer sqr = MidiSystem.getSequencer();
			Transmitter sqrTrans = sqr.getTransmitter();
			Receiver synthRcvr = syn.getReceiver();
			sqrTrans.setReceiver(synthRcvr);
			
			sqr.open();
			sq = WriteRandomMidi.combineSequences(WriteRandomMidi.makeRandomSong(WriteRandomMidi.getRandomKey(), WriteRandomMidi.getRandomChords(), 2));
			sqr.setSequence(sq);
			sqr.setTempoInBPM(beats);
			sqr.start();
		
		} catch (MidiUnavailableException e) {
			e.printStackTrace();
		} catch (InvalidMidiDataException e) {
			e.printStackTrace();
		}
	}
}
